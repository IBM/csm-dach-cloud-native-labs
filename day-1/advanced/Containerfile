# BUILD STAGE

# Node.js 16.13.1
FROM node@sha256:534004248435dea5cecf3667232f800fc6bd101768306aecf6b87d78067b0563 as builder
# By using the digest (@sha...) we uniquely and immutably identify a container image. Tags such as v1.0 are only pointers to a specific image. The digest is a more precise way to identify an image. The alias "builder" we set will become relevant in the next stage.

WORKDIR /app
# The WORKDIR instruction creates a folder inside the container and defines it as the working directory for all subsequent instructions.

COPY ["app.js", "package.json", "/app/"]
# The COPY instruction copies files from the host into the container image. The array's last index must be the destination inside the container
# You could also use the ADD instruction instead. The ADD instruction even extracts archives (apart from *.zip) while copying.

RUN npm install


# RUN STAGE

# Node.js 16.13.1-alpine3.14
FROM node@sha256:8569c8f07454ec42501e5e40a680e49d3f9aabab91a6c149e309bac63a3c8d54
# For the final container image we take a much smaller base image (~113MB) and copy the installed depencendies from the build stage. This is called a multi-stage build.

WORKDIR /app

COPY --from=builder /app/ .

LABEL author="Raphael Tholl raphael.tholl@ibm.com"

ENV username=raphael
# The ENV instruction sets an environment variable, which the app can later access.
# The ARG instruction is rather similar. The difference is that ARG variables are only accessible during the image build process.

RUN chown -R node:node /app
# It is considered best practice to not run your applications as root inside the container. Thus, we use the node user, which is provided by the Node.js base image. We need to change ownership of the copied files to avoid runtime errors.

USER node
# The USER instruction runs all subsequent instructions as the provided user.

EXPOSE 8000

ENTRYPOINT ["node"]

CMD ["app.js"]